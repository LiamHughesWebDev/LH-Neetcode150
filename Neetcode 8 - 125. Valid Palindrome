//First attempt - passes all tests

public class Solution {
    public bool IsPalindrome(string s) {
        Dictionary<int, List<char>> Dict = new Dictionary<int, List<char>>();

        foreach(char c in s)
        {
            if(Char.IsLetterOrDigit(c))
            {
                if(!Dict.ContainsKey(0))
                {
                    List<char> temp = new List<char>();
                    temp.Add(Char.ToLower(c));
                    Dict.Add(0,temp); 
                }
                else{
                    List<char> temp = new List<char>();
                    temp = Dict[0];
                    temp.Add(Char.ToLower(c));
                    Dict[0] = temp;
                }
            }
        }

        if(Dict.ContainsKey(0))
        {
            List<char> flip = new List<char>(Dict[0]);
            flip.Reverse();
            Dict.Add(1, flip);
        }
        
        if(Dict.ContainsKey(1))
        {
            List<char> dict0 = new List<char>(Dict[0]);
            List<char> dict1 = new List<char>(Dict[1]);

            var a = dict0.SequenceEqual(dict1);
            if(a == true)
            {
                return true;
            }
        }
        else{
            return true;
        }

        return false;
    }
}

// Best Solution - uses 2 functions: 1- to convert the string to Lower and all letters and numbers. 2-check if 

public class Solution {
    public bool IsPalindrome(string s) {
        s = s.ToLower();
        s = new string(s.Where(c => char.IsLetterOrDigit(c)).ToArray());
        if (s.Length < 1) {
            return true;
        }
        return Rec(0, s);
    }

    private static bool Rec(int i, string s) {
        if (i >= s.Length / 2) {
            return true;
        }
        if (s[i] != s[s.Length - i - 1]) {
            return false;
        }
        return Rec(i + 1, s);
    }
}
