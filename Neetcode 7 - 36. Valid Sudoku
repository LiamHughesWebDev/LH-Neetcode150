//First attempt - passes all tests

public class Solution {
    public bool IsValidSudoku(char[][] board) {
        Dictionary<int, List<char>> colDict = new Dictionary<int, List<char>>();
        Dictionary<string, List<char>> gridDict = new Dictionary<string, List<char>>();

        for(int a=0; a <= board.Length - 1; a++)
        {
            for(int i=0; i <= board[a].Length - 1; i++)
            {
                char dot = '.';
                if(board[a][i] != dot)
                {
                    int findAllLength = Array.FindAll(board[a], x => x == board[a][i]).Length;
                    if(findAllLength >= 2)
                    {
                        Console.WriteLine("Found row dup");
                        return false;
                    }

                    if(!colDict.ContainsKey(i)){
                        List<char> temp = new List<char>();
                        temp.Add(board[a][i]);
                        colDict.Add(i,temp);
                    }else{
                        List<char> temp = colDict[i];
                        if(temp.Contains(board[a][i]))
                        {
                            Console.WriteLine("Found column dup");
                            return false;
                        }
                        temp.Add(board[a][i]);
                        colDict[i] = temp;
                    }

                    int[] keySearch = [0,0];
                    keySearch[0] = a / 3;
                    keySearch[1] = i / 3;
                    string search = string.Join(",", keySearch);

                    if(!gridDict.ContainsKey(search)){
                        Console.WriteLine("creating");
                        List<char> temp = new List<char>();
                        temp.Add(board[a][i]);
                        gridDict.Add(search,temp);
                    }else{
                        Console.WriteLine("adding");
                        List<char> temp = gridDict[search];
                        if(temp.Contains(board[a][i]))
                        {
                            Console.WriteLine("Found grid dup");
                            return false;
                        }
                        temp.Add(board[a][i]);
                        gridDict[search] = temp;
                    }
                }
            }
        }
        
        return true;
        
    }
}



// Best Solution - Uses hashSet instead of Hashmap

public class Solution {
    public bool IsValidSudoku(char[][] board) {
        HashSet<char>[] row = new HashSet<char>[9];
        HashSet<char>[] col = new HashSet<char>[9];
        HashSet<char>[] box = new HashSet<char>[9];

        for(int i = 0; i < 9; i++)
        {
            row[i] = new HashSet<char>();
            col[i] = new HashSet<char>();
            box[i] = new HashSet<char>();
        }

        for(int i = 0; i < board.Length; i++)
        {
            for(int j = 0; j < board[i].Length; j++)
            {
                char c = board[i][j];
                if(c == '.')
                {
                    continue;
                }

                if(row[i].Contains(c))
                {
                    return false;
                }
                else
                {
                    row[i].Add(c);
                }

                if(col[j].Contains(c))
                {
                    return false;
                }
                else
                {
                    col[j].Add(c);
                }

                int x = i/3;
                int y = j/3+x*3;

                if(box[y].Contains(c))
                {
                    return false;
                }
                else
                {
                    box[y].Add(c);
                }

            }
        }

        return true;
    }
}
